//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Game/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""JetControls"",
            ""id"": ""a737afdc-b3f4-43d8-9886-53c2228cb8ac"",
            ""actions"": [
                {
                    ""name"": ""ThrottleUp"",
                    ""type"": ""Button"",
                    ""id"": ""3e34e925-0b62-4af1-9eb3-30a706fb396c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleDown"",
                    ""type"": ""Button"",
                    ""id"": ""0283a753-f425-400f-b722-f5086f1a9763"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""7aa84a29-0003-454b-a4d5-59f364bc2ea7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""YawLeft"",
                    ""type"": ""Button"",
                    ""id"": ""a4aaebc0-2238-44bf-925f-db5281c6eecd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""YawRight"",
                    ""type"": ""Button"",
                    ""id"": ""a603cee6-a106-44df-8d72-f72d8e498ab7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb505c11-8b1e-45bb-82ee-5f90b9348f00"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""810ec3d8-286b-4ec4-ab6f-c807921efb65"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""422f46cb-5d39-4f05-91d7-4390ddc43b37"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da3d3767-4072-4bd1-959b-bac477bc35af"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72c9733a-297f-4421-9456-af31c6d41e30"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YawRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Weapons"",
            ""id"": ""59c38a1d-b5fb-42f7-843d-0975a9645d7f"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""43941da2-47e3-4449-be55-f053af4983ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""df39917e-e62e-45e3-bcff-b83cca67cd91"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // JetControls
        m_JetControls = asset.FindActionMap("JetControls", throwIfNotFound: true);
        m_JetControls_ThrottleUp = m_JetControls.FindAction("ThrottleUp", throwIfNotFound: true);
        m_JetControls_ThrottleDown = m_JetControls.FindAction("ThrottleDown", throwIfNotFound: true);
        m_JetControls_Mouse = m_JetControls.FindAction("Mouse", throwIfNotFound: true);
        m_JetControls_YawLeft = m_JetControls.FindAction("YawLeft", throwIfNotFound: true);
        m_JetControls_YawRight = m_JetControls.FindAction("YawRight", throwIfNotFound: true);
        // Weapons
        m_Weapons = asset.FindActionMap("Weapons", throwIfNotFound: true);
        m_Weapons_Newaction = m_Weapons.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // JetControls
    private readonly InputActionMap m_JetControls;
    private List<IJetControlsActions> m_JetControlsActionsCallbackInterfaces = new List<IJetControlsActions>();
    private readonly InputAction m_JetControls_ThrottleUp;
    private readonly InputAction m_JetControls_ThrottleDown;
    private readonly InputAction m_JetControls_Mouse;
    private readonly InputAction m_JetControls_YawLeft;
    private readonly InputAction m_JetControls_YawRight;
    public struct JetControlsActions
    {
        private @PlayerControls m_Wrapper;
        public JetControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ThrottleUp => m_Wrapper.m_JetControls_ThrottleUp;
        public InputAction @ThrottleDown => m_Wrapper.m_JetControls_ThrottleDown;
        public InputAction @Mouse => m_Wrapper.m_JetControls_Mouse;
        public InputAction @YawLeft => m_Wrapper.m_JetControls_YawLeft;
        public InputAction @YawRight => m_Wrapper.m_JetControls_YawRight;
        public InputActionMap Get() { return m_Wrapper.m_JetControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JetControlsActions set) { return set.Get(); }
        public void AddCallbacks(IJetControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_JetControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JetControlsActionsCallbackInterfaces.Add(instance);
            @ThrottleUp.started += instance.OnThrottleUp;
            @ThrottleUp.performed += instance.OnThrottleUp;
            @ThrottleUp.canceled += instance.OnThrottleUp;
            @ThrottleDown.started += instance.OnThrottleDown;
            @ThrottleDown.performed += instance.OnThrottleDown;
            @ThrottleDown.canceled += instance.OnThrottleDown;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @YawLeft.started += instance.OnYawLeft;
            @YawLeft.performed += instance.OnYawLeft;
            @YawLeft.canceled += instance.OnYawLeft;
            @YawRight.started += instance.OnYawRight;
            @YawRight.performed += instance.OnYawRight;
            @YawRight.canceled += instance.OnYawRight;
        }

        private void UnregisterCallbacks(IJetControlsActions instance)
        {
            @ThrottleUp.started -= instance.OnThrottleUp;
            @ThrottleUp.performed -= instance.OnThrottleUp;
            @ThrottleUp.canceled -= instance.OnThrottleUp;
            @ThrottleDown.started -= instance.OnThrottleDown;
            @ThrottleDown.performed -= instance.OnThrottleDown;
            @ThrottleDown.canceled -= instance.OnThrottleDown;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @YawLeft.started -= instance.OnYawLeft;
            @YawLeft.performed -= instance.OnYawLeft;
            @YawLeft.canceled -= instance.OnYawLeft;
            @YawRight.started -= instance.OnYawRight;
            @YawRight.performed -= instance.OnYawRight;
            @YawRight.canceled -= instance.OnYawRight;
        }

        public void RemoveCallbacks(IJetControlsActions instance)
        {
            if (m_Wrapper.m_JetControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJetControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_JetControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JetControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JetControlsActions @JetControls => new JetControlsActions(this);

    // Weapons
    private readonly InputActionMap m_Weapons;
    private List<IWeaponsActions> m_WeaponsActionsCallbackInterfaces = new List<IWeaponsActions>();
    private readonly InputAction m_Weapons_Newaction;
    public struct WeaponsActions
    {
        private @PlayerControls m_Wrapper;
        public WeaponsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Weapons_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Weapons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponsActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IWeaponsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IWeaponsActions instance)
        {
            if (m_Wrapper.m_WeaponsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponsActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponsActions @Weapons => new WeaponsActions(this);
    public interface IJetControlsActions
    {
        void OnThrottleUp(InputAction.CallbackContext context);
        void OnThrottleDown(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnYawLeft(InputAction.CallbackContext context);
        void OnYawRight(InputAction.CallbackContext context);
    }
    public interface IWeaponsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
